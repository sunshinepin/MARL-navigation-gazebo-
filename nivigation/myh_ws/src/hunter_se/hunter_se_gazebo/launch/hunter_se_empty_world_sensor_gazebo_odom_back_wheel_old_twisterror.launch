<?xml version="1.0"?>
<launch>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" default="true"/>
        <arg name="use_sim_time" default="ture"/>
        <arg name="world_name" value="$(find sim_myh)/world/myh_2.world"/> 
      
  </include>
 <group ns = "car1">
   <param name="car_name" value="car1" />
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0.4"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="0"/>


  <!-- Load controller parameters -->
  <rosparam command="load" file="$(find hunter_se_control)/config/ctrl_ackermann_steering_controller_car1.yaml" />
  <rosparam command="load" file="$(find hunter_se_control)/config/ctrl_gains.yaml" />
  <rosparam command="load" file="$(find hunter_se_control)/config/ctrl_joint_state_publisher.yaml" />
  <rosparam command="load" file="$(find hunter_se_control)/config/ctrl_steer_bot_hardware_gazebo.yaml" />

  <!-- Spawn the controllers -->
  <node pkg="controller_manager" type="spawner" name="controller_spawner"
      args="joint_state_publisher ackermann_steering_controller"  output="screen" respawn="false" />
  


      <!-- Launch a rqt steering GUI for publishing to /steer_bot/steer_drive_controller/cmd_vel -->
      <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
      <param name="default_topic" value="ackermann_steering_controller/cmd_vel"/>                         <!-- default velocity control topic name -->
      <param name="default_vx_max" value="1.0"/>                        <!-- linear velocity max value    m/s -->
      <param name="default_vx_min" value="-1.0"/>                       <!-- linear velocity min value    m/s-->
      <param name="default_vw_max" value="0.69"/>                    <!-- angular velocity max value  rad/s (adaptor for urdf joint limit) -->
      <param name="default_vw_min" value="-0.69"/>                   <!-- angular velocity min value  rad/s (adaptor for urdf joint limit) -->
      </node>
  

  <!-- urdf xml robot description loaded on the Parameter Server, converting the xacro into a proper urdf file-->
  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find hunter_se_gazebo)/xacro/hunter_se_base.xacro'" /> -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find hunter_se_description)/urdf/hunter_se_with_box_sensor.xacro' robot_namespace:=car1" />
  <!-- <param name="robot_description" command="cat $(find hunter_se_base)/urdf/hunter_se_base.urdf"/> -->
  <!-- push robot_description to factory and spawn robot in gazebo -->
    <!-- Launch the robot state publisher -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" >
          <param name="publish_frequency" value="50.0"/>
          <param name="tf_prefix" value="car1" />
      </node>
  <node name="hunter_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model car1 -x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"
    respawn="false" />
    <node pkg="gazebo_states_odom" name="publish_odom_from_gazebo_para_back_wheel" type="publish_odom_from_gazebo_link_para_back_wheel.py" output="screen">
		</node>
    <node pkg="gazebo_states_odom" name="publish_odom_from_gazebo_para" type="publish_odom_from_gazebo_link_para.py" output="screen">
		</node>
</group>
  </launch>

